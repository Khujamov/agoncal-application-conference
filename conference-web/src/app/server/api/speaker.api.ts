/**
 * Speaker
 * Gives all the details of the speakers
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {Http, Headers, RequestOptionsArgs, Response, URLSearchParams} from '@angular/http';
import {Injectable, Optional} from '@angular/core';
import {Observable} from 'rxjs/Observable';
import 'rxjs/Rx';

/* tslint:disable:no-unused-variable member-ordering */

'use strict';
import { Speaker } from '../model/Speaker';

@Injectable()
export class SpeakerApi {
    protected basePath = 'http://localhost:8080/conference-speaker/api';
    public defaultHeaders : Headers = new Headers();

    // HATEOAS
    public links: { [key: string]: string; } = {};

    constructor(protected http: Http, @Optional() basePath: string) {
        if (basePath) {
            this.basePath = basePath;
        }
    }

    public getResponse(body: any): any {
        if (!body.data)
            return body;

        if (body.links) {
            this.links = {};
            for (let key in body.links) {
                this.links[key] = body.links[key] !== undefined ? body.links[key] : null;
            }
        }
        return body.data;
    }
    /**
     * Adds a new speaker to the conference
     *
     */
    public add (extraHttpRequestParams?: any ) : Observable<{}> {
        const path = this.basePath + '/speakers';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return this.getResponse(response.json());
                }
            });
    }

    /**
     * Finds all the speakers
     *
     * @param page
     */
    public allSpeakers (page?: number, extraHttpRequestParams?: any ) : Observable<Array<Speaker>> {
        const path = this.basePath + '/speakers';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        if (page !== undefined) {
            queryParameters.set('page', String(page));
        }

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return this.getResponse(response.json());
                }
            });
    }

    /**
     * Deletes a speaker
     *
     * @param id
     */
    public remove (id: string, extraHttpRequestParams?: any ) : Observable<{}> {
        const path = this.basePath + '/speakers/{id}'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling remove.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'DELETE',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return this.getResponse(response.json());
                }
            });
    }

    /**
     * Finds a speaker by ID
     *
     * @param id
     * @param expand
     */
    public retrieve (id: string, expand?: boolean, extraHttpRequestParams?: any ) : Observable<Speaker> {
        const path = this.basePath + '/speakers/{id}'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling retrieve.');
        }
        if (expand !== undefined) {
            queryParameters.set('expand', String(expand));
        }

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return this.getResponse(response.json());
                }
            });
    }
}
