/**
 * Speaker
 * Gives all the details of the speakers
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { Inject, Injectable, Optional } from '@angular/core';
import { Http, Headers, URLSearchParams } from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType } from '@angular/http';

import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class SpeakerApi {
    protected basePath = 'http://localhost:8084/api';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    public links: { [key: string]: string; } = {};

    public getResponse(body: any): any {
        if (!body.data)
            return body;

        if (body.links) {
            this.links = {};
            for (let key in body.links) {
                this.links[key] = body.links[key] !== undefined ? body.links[key] : null;
            }
        }
        return body.data;
    }

    constructor(protected http: Http, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }

        this.basePath += '/conference-speaker/api';

    }

    /**
     * Adds a new speaker to the conference
     * 
     * @param body Speaker to be created
     */
    public add(body: models.Speaker, extraHttpRequestParams?: any): Observable<{}> {
        return this.addWithHttpInfo(body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return this.getResponse(response.json());
                }
            });
    }

    /**
     * Finds all the speakers
     * 
     * @param page 
     */
    public allSpeakers(page?: number, extraHttpRequestParams?: any): Observable<Array<models.Speaker>> {
        return this.allSpeakersWithHttpInfo(page, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return this.getResponse(response.json());
                }
            });
    }

    /**
     * Deletes a speaker
     * 
     * @param id 
     */
    public remove(id: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.removeWithHttpInfo(id, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return this.getResponse(response.json());
                }
            });
    }

    /**
     * Finds a speaker by ID
     * 
     * @param id 
     * @param expand 
     */
    public retrieve(id: string, expand?: boolean, extraHttpRequestParams?: any): Observable<models.Speaker> {
        return this.retrieveWithHttpInfo(id, expand, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return this.getResponse(response.json());
                }
            });
    }


    /**
     * Adds a new speaker to the conference
     * 
     * @param body Speaker to be created
     */
    public addWithHttpInfo(body: models.Speaker, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/speakers`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling add.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Finds all the speakers
     * 
     * @param page 
     */
    public allSpeakersWithHttpInfo(page?: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/speakers`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (page !== undefined) {
            if (<any>page instanceof Date) {
                queryParameters.set('page', (<any>page).d.toISOString());
            } else {
                queryParameters.set('page', <any>page);
            }
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Deletes a speaker
     * 
     * @param id 
     */
    public removeWithHttpInfo(id: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/speakers/${id}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling remove.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Finds a speaker by ID
     * 
     * @param id 
     * @param expand 
     */
    public retrieveWithHttpInfo(id: string, expand?: boolean, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/speakers/${id}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling retrieve.');
        }
        if (expand !== undefined) {
            if (<any>expand instanceof Date) {
                queryParameters.set('expand', (<any>expand).d.toISOString());
            } else {
                queryParameters.set('expand', <any>expand);
            }
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
