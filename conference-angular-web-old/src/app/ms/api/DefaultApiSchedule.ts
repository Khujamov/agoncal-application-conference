/**
 * Schedule
 * Gives all the details of the schedule
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { Http, Headers, RequestOptionsArgs, Response, URLSearchParams } from '@angular/http';
import { Injectable, Optional } from '@angular/core';
import { Observable } from 'rxjs/Observable';
import * as models from '../model/models';
import 'rxjs/Rx';

/* tslint:disable:no-unused-variable member-ordering */

'use strict';

declare interface etagResponse { etag?: string; body?: any };

@Injectable()
export class DefaultApiSchedule {
    public basePath = 'http://conference.docker.localhost:90/conference-schedule/api';
    public defaultHeaders: Headers = new Headers();

    // HATEOAS
    public links: { [key: string]: string; } = {};

    constructor(protected http: Http, @Optional() basePath: string) {
        if (basePath) {
            this.basePath = basePath;
        }
    }
    public getResponse(response: Response): any {

        var headers = response.headers;
        var body = response.json();

        var etagReponse: etagResponse = {};
        etagReponse.body = body.data ? body.data : body;

        if (body.links) {
            this.links = {};
            for (let key in body.links) {
                this.links[key] = body.links[key] !== undefined ? body.links[key] : null;
            }
        }

        return etagReponse.body;

    }
    /**
     * Adds a new session to the conference
     * 
     */
    public add(extraHttpRequestParams?: any): Observable<{}> {
        const path = this.basePath + '/sessions';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return this.getResponse(response);
                }
            });
    }

    /**
     * Finds all the sessions
     * 
     * @param page 
     */
    public allSessions(page?: number, extraHttpRequestParams?: any): Observable<Array<models.Session>> {
        const path = this.basePath + '/sessions';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        if (page !== undefined) {
            queryParameters.set('page', String(page));
        }

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return this.getResponse(response);
                }
            });
    }

    /**
     * Finds all the sessions for Friday
     * 
     */
    public allSessionsFriday(extraHttpRequestParams?: any): Observable<Array<models.Session>> {
        const path = this.basePath + '/sessions/friday';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return this.getResponse(response);
                }
            });
    }

    /**
     * Finds all the sessions for Friday on a specific room
     * 
     * @param roomId 
     */
    public allSessionsFridayByRoom(roomId: string, extraHttpRequestParams?: any): Observable<Array<models.Session>> {
        const path = this.basePath + '/sessions/friday/{roomId}'
            .replace('{' + 'roomId' + '}', String(roomId));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'roomId' is not null or undefined
        if (roomId === null || roomId === undefined) {
            throw new Error('Required parameter roomId was null or undefined when calling allSessionsFridayByRoom.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return this.getResponse(response);
                }
            });
    }

    /**
     * Finds all the sessions for Monday
     * 
     */
    public allSessionsMonday(extraHttpRequestParams?: any): Observable<Array<models.Session>> {
        const path = this.basePath + '/sessions/monday';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return this.getResponse(response);
                }
            });
    }

    /**
     * Finds all the sessions for Monday on a specific room
     * 
     * @param roomId 
     */
    public allSessionsMondayByRoom(roomId: string, extraHttpRequestParams?: any): Observable<Array<models.Session>> {
        const path = this.basePath + '/sessions/monday/{roomId}'
            .replace('{' + 'roomId' + '}', String(roomId));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'roomId' is not null or undefined
        if (roomId === null || roomId === undefined) {
            throw new Error('Required parameter roomId was null or undefined when calling allSessionsMondayByRoom.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return this.getResponse(response);
                }
            });
    }

    /**
     * Finds all the sessions for Thursday
     * 
     */
    public allSessionsThursday(extraHttpRequestParams?: any): Observable<Array<models.Session>> {
        const path = this.basePath + '/sessions/thursday';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return this.getResponse(response);
                }
            });
    }

    /**
     * Finds all the sessions for Thursday on a specific room
     * 
     * @param roomId 
     */
    public allSessionsThursdayByRoom(roomId: string, extraHttpRequestParams?: any): Observable<Array<models.Session>> {
        const path = this.basePath + '/sessions/thursday/{roomId}'
            .replace('{' + 'roomId' + '}', String(roomId));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'roomId' is not null or undefined
        if (roomId === null || roomId === undefined) {
            throw new Error('Required parameter roomId was null or undefined when calling allSessionsThursdayByRoom.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return this.getResponse(response);
                }
            });
    }

    /**
     * Finds all the sessions for Tuesday
     * 
     */
    public allSessionsTuesday(extraHttpRequestParams?: any): Observable<Array<models.Session>> {
        const path = this.basePath + '/sessions/tuesday';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return this.getResponse(response);
                }
            });
    }

    /**
     * Finds all the sessions for Tuesday on a specific room
     * 
     * @param roomId 
     */
    public allSessionsTuesdayByRoom(roomId: string, extraHttpRequestParams?: any): Observable<Array<models.Session>> {
        const path = this.basePath + '/sessions/tuesday/{roomId}'
            .replace('{' + 'roomId' + '}', String(roomId));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'roomId' is not null or undefined
        if (roomId === null || roomId === undefined) {
            throw new Error('Required parameter roomId was null or undefined when calling allSessionsTuesdayByRoom.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return this.getResponse(response);
                }
            });
    }

    /**
     * Finds all the sessions for Wednesday
     * 
     */
    public allSessionsWednesday(extraHttpRequestParams?: any): Observable<Array<models.Session>> {
        const path = this.basePath + '/sessions/wednesday';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return this.getResponse(response);
                }
            });
    }

    /**
     * Finds all the sessions for Wednesday on a specific room
     * 
     * @param roomId 
     */
    public allSessionsWednesdayByRoom(roomId: string, extraHttpRequestParams?: any): Observable<Array<models.Session>> {
        const path = this.basePath + '/sessions/wednesday/{roomId}'
            .replace('{' + 'roomId' + '}', String(roomId));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'roomId' is not null or undefined
        if (roomId === null || roomId === undefined) {
            throw new Error('Required parameter roomId was null or undefined when calling allSessionsWednesdayByRoom.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return this.getResponse(response);
                }
            });
    }

    /**
     * Deletes a session
     * 
     * @param id 
     */
    public remove(id: string, extraHttpRequestParams?: any): Observable<{}> {
        const path = this.basePath + '/sessions/{id}'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling remove.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'DELETE',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return this.getResponse(response);
                }
            });
    }

    /**
     * Finds a session by ID
     * 
     * @param id 
     */
    public retrieve(id: string, extraHttpRequestParams?: any): Observable<models.Session> {
        const path = this.basePath + '/sessions/{id}'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling retrieve.');
        }


        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return this.getResponse(response);
                }
            })
            .catch((err: any) => {
                return Observable.of(this.getResponse(err));
            })
    }

}
