/**
 * Talk
 * Gives all the details of the talks
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { Http, Headers, RequestOptionsArgs, Response, URLSearchParams } from '@angular/http';
import { Injectable, Optional } from '@angular/core';
import { Observable } from 'rxjs/Observable';
import * as models from '../model/models';
import 'rxjs/Rx';

/* tslint:disable:no-unused-variable member-ordering */

'use strict';
declare interface etagResponse { etag?: string; body?: any };

@Injectable()
export class DefaultApiTalk {
    protected basePath = 'http://conference.docker.localhost:90/conference-talk/api';
    public defaultHeaders: Headers = new Headers();
    // HATEOAS
    public links: { [key: string]: string; } = {};

    // ETAG
    public etags = new Map<string, string>();

    constructor(protected http: Http, @Optional() basePath: string) {
        if (basePath) {
            this.basePath = basePath;
        }
    }

    public getResponse(response: Response): any {

        // if (response.status === 304) {
        //     var cacheEtag: etagResponse = JSON.parse(localStorage.getItem(response.url))
        //     return cacheEtag.body;
        // }

        var headers = response.headers;
        var body = response.json();

        var etagReponse: etagResponse = {};

        etagReponse.body = body.data ? body.data : body;

        if (body.links) {
            this.links = {};
            for (let key in body.links) {
                this.links[key] = body.links[key] !== undefined ? body.links[key] : null;
            }
        }

        // if (headers.has('ETag')) {
        //     etagReponse.etag = headers.get('ETag');
        //     localStorage.setItem(response.url, JSON.stringify(etagReponse))
        // }

        return etagReponse.body;

    }


    /**
     * Adds a new talk to the conference
     * 
     */
    public add(extraHttpRequestParams?: any): Observable<{}> {
        const path = this.basePath + '/talks';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return this.getResponse(response);
                }
            });
    }

    /**
     * Finds all the talks
     * 
     * @param page 
     */
    public allTalks(page?: number, extraHttpRequestParams?: any): Observable<Array<models.Talk>> {
        const path = this.basePath + '/talks';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        if (page !== undefined) {
            queryParameters.set('page', String(page));
        }

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return this.getResponse(response);
                }
            });
    }

    /**
     * Deletes a talk
     * 
     * @param id 
     */
    public remove(id: string, extraHttpRequestParams?: any): Observable<{}> {
        const path = this.basePath + '/talks/{id}'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling remove.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'DELETE',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return this.getResponse(response);
                }
            });
    }

    /**
     * Finds a talk by ID
     * 
     * @param id 
     */
    public retrieve(id: string, extraHttpRequestParams?: any): Observable<models.Talk> {
        const path = this.basePath + '/talks/{id}'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling retrieve.');
        }

        // var etagCacheString: string = localStorage.getItem(path);
        // if (etagCacheString) {
        //     var etagCache: etagResponse = JSON.parse(etagCacheString)
        //    if (etagCache && etagCache.body && etagCache.etag)
        //         headerParams.append('If-None-Match', etagCache.etag);
        // }

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };


        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return this.getResponse(response);
                }
            }).catch((err: any) => {
                return Observable.of(this.getResponse(err));
            })


    }

}
